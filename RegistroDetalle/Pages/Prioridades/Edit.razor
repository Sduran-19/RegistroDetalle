@page "/editarprioridades/{PrioridadID:int}";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<EditForm Model="prioridades" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
      <div class="card shadow-lg">
            @*Header*@
            <div class="card-header">
                <h3><strong>Editar Prioridad</strong></h3>
            </div>

            @*Body*@
           <div class="card-body">
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl4"></div>
                @*ID*@
                <div class="mb-3">
                    <div class="col-4">
                        <label class="form-label" for="prioridadId"><strong>PrioridadId:</strong></label>
                        <div class="input-group">
                            <InputNumber id="prioridadId" class="form-control" @bind-Value="prioridades.PrioridadId"></InputNumber>
                        </div>
                    </div>
                </div>
                @*Descripcion*@
                <div class="mb-3">
                    <div class="col-4">
                        <label class="form-label" for="entradaDescripcion"><strong>Descripci&oacute;n:</strong></label>
                        <InputText id="entradaDescripcion" class="form-control" placeholder="Escribe una descripci&oacute;n" @bind-Value="prioridades.Descripcion"></InputText>
                        <ValidationMessage For="@(() => prioridades.Descripcion)" />
                    </div>
                </div>
                @*Dias compromiso*@
                <div class="mb-3">
                    <div class="col-4">
                        <label class="form-label" for="entradaDiasCompromiso"><strong>D&iacute;asCompromiso:</strong></label>
                        <InputNumber id="entradaDiasCompromiso" class="form-control" @bind-Value="prioridades.DiasCompromiso"></InputNumber>
                        <ValidationMessage For="@(() => prioridades.DiasCompromiso)" />
                    </div>
            </div>
        </div>
                <div class="mb-3"></div>

        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/indexprioridades/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>
    </div>
    @mensajeTexto
</EditForm>






@code {

    public Prioridades prioridades = new Prioridades();

    [Parameter]
    public int PrioridadID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>("api/Prioridades/" + PrioridadID);
        if (prioridadEncontrado != null)
        {
            this.prioridades = prioridadEncontrado;
        }
        else
        {
            await MostrarMensaje("Prioridad no encontrada", false);
        }
    }


    public async Task Guardar()
    {
        var guardado = await httpClient.PutAsJsonAsync("api/Prioridades", this.prioridades);
        if (guardado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Guardado Existoso.", true);
            NavigationManager.NavigateTo("/indexprioridades");
        }
        else
        {
            await MostrarMensaje("No se puso conectar a la API", false);
        }
    }


    string mensajeTexto = "";
    bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, bool exito)
    {
        mensajeTexto = mensaje;

        if (exito)
        {
            mensajeTexto = "Editado con Exito";
        }
        else
        {
            mensajeTexto = "Error";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}
