@page "/deleteprioridades/{PrioridadID:int}";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="card-header">
    <h3><strong> Eliminar Prioridad</strong></h3>
</div>

    <div class="card-body text-center">
        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">Id:</label>
            <span>@prioridades.PrioridadId</span>
        </div>

        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">Descripci&oacute;n:</label>
            <span>@prioridades.Descripcion</span>
        </div>

        <div class="col-md-6 mb-3 mx-auto">
            <label style="font-weight: bold;" class="form-label font-weight-bold">D&iacute;a Compromiso:</label>
            <span>@prioridades.DiasCompromiso</span>
        </div>

        <div class="col-md-12 mb-3 mx-auto">
            <p style="font-weight: bold;">&iquest;Seguro que deseas eliminar esta prioridad?</p>
        </div>

    </div>

    <div class="card-footer bg-light d-flex justify-content-center">
        <div class="btn-group">
            <button @onclick="Eliminar" type="button" class="btn btn-success btn-block"><span class="fas fa-check"></span> S&iacute;</button>
            <a href="/indexprioridades/" class="btn btn-danger btn-block"><span class="fas fa-times"></span> No</a>
        </div>
    </div>


@if (ModalMensaje)
{
    <div class="modal d-block" style="z-index: 999999; transition: transform 0.3s ease;">
        <div class="w-auto position-fixed top-50 start-50 translate-middle">
            <div class="modal-content" style="border-radius: 20px;">

                <div class="modal-body bg-text-center text-white" style="border-radius: 15px;">
                    <label class="fw-bold">@mensajeTexto</label>
                </div>

            </div>
        </div>
    </div>
}


@code {

    public Prioridades prioridades = new Prioridades();

    [Parameter]
    public int PrioridadID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var prioridadEncontrado = await httpClient.GetFromJsonAsync<Prioridades>("api/Prioridades/" + PrioridadID);
        if (prioridadEncontrado != null)
        {
            this.prioridades = prioridadEncontrado;
        }
        else
        {
            await MostrarMensaje("Prioridad no encontrada", "danger");
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await httpClient.DeleteAsync("api/Prioridades/" + PrioridadID);
        if (eliminado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Eliminado Existoso.", "success");
            NavigationManager.NavigateTo("/indexprioridades");
        }
        else
        {
            await MostrarMensaje("Error Inesperado.", "danger");
        }
    }

    string mensajeTexto = "";
    bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, string tipo)
    {
        mensajeTexto = mensaje;

        if (tipo == "success")
        {
            mensajeTexto = "success";
        }
        else
        {
            mensajeTexto = "danger";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}
