@page "/indexcliente"

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<EditForm Model="ListaClientes" class="border shadow-lg p-3 rounded">
    <div class="card-header">
        <h3><strong> Cliente</strong></h3>
    </div>

    <div class="card-body">
        <div class="row mb-3 align-items-end">
            <div class="col-md-3">
                <label for="Filtro" class="form-label">Filtrar por:</label>
                <select @bind="filtro" class="form-select">
                    <option value="id">Id</option>
                    <option value="nombre">Nombre</option>
                    <option value="rnc">RNC</option>
                </select>
            </div>
            <div class="col-md-6">
                <label  for="ValorFiltro" class="form-label">B&uacute;squeda:</label>
                <div class="input-group">
                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                        <span class="fas fa-search"></span> Buscar
                    </button>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <a href="/createCliente" class="btn btn-outline-success" type="button"><span class="bi bi-floppy-fill"></span> Crear </a>
            </div>
        </div>
    </div>
    <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>RNC</th>
                <th>Tel&eacute;fono</th>
                <th>Celular</th>
                <th>Email</th>
                <th>Direcci&oacute;n</th>
                <th>Editar</th>
                <th>Detalle</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @if (ListaClientes.Any())
            {
                @foreach (var cliente in ListaClientes)
                {
                    
                    <tr>
                        <td>@cliente.ClienteId</td>
                        <td>@cliente.Nombres</td>
                        <td>@cliente.RNC</td>
                        <td>@cliente.Telefono</td>
                        <td>@cliente.Celular</td>
                        <td>@cliente.Email</td>
                        <td>@cliente.Direccion</td>
                        <td>
                            <a href="/editarCliente/@cliente.ClienteId" class="btn-editar"> Editar
                            </a>
                        </td>
                        <td>
                            <a href="/detailsCliente/@cliente.ClienteId" class="btn-detalle"> Ver
                            </a>
                        </td>
                        <td>
                            <a href="/deleteCliente/@cliente.ClienteId" class="btn-eliminar"> Eliminar
                            </a>
                        </td>
                    </tr>
                }
            }
          
       </tbody>
    </table>

    @mensajeTexto
</EditForm>



@code {

    public Clientes clientes = new Clientes();

    private string filtro = "id";
    private string valorFiltro = "";

    public List<Clientes> ListaClientes = new List<Clientes>();

    protected override async Task OnInitializedAsync()
    {
        ListaClientes = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
    }

    private async Task Buscar()
    {
        if (valorFiltro.Trim() != "")
        {
            if (filtro == "id" && int.TryParse(valorFiltro, out int clienteId))
            {
                ListaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!.Where(c => c.ClienteId == clienteId).ToList();
            }

            else if (filtro == "nombre")
            {
                ListaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!.Where(c => c.Nombres == valorFiltro).ToList();
            }
            else if (filtro == "rnc")
            {
                ListaClientes = (await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes"))!.Where(c => c.RNC == valorFiltro).ToList();
            }

            if (ListaClientes == null || ListaClientes.Count == 0)
            {
                await MostrarMensaje("Cliente no encontrado", false);
            }
        }
        else
        {
            ListaClientes = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
        }
    }


    string mensajeTexto = "";
    bool ModalMensaje = false;

        public async Task MostrarMensaje(string mensaje, bool exito)
        {
            mensajeTexto = mensaje;

            if (exito)
            {
                mensajeTexto = "Encontrado con Exito";
            }
            else
            {
                mensajeTexto = "Error";
            }

            ModalMensaje = true;
            StateHasChanged();
            await Task.Delay(3000);
            ModalMensaje = false;
            StateHasChanged();
        }

}

