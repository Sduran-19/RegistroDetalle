@page "/detailsCliente/{ClienteID:int}";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Detalle de Cliente</strong></h3>
		</div>
		@*Body*@
		<div class="card-body">
			@*Datos*@
			<div class="mb-1">
				<p class="mb-0">ClienteId: @clientes.ClienteId</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">Nombre: @clientes.Nombres</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">Tel&eacute;fono: @clientes.Telefono</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">Celular: @clientes.Celular</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">RNC: @clientes.RNC</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">Email: @clientes.Email</p>
			</div>
			<div class="mb-1">
				<p class="mb-0">Direcci&oacute;n: @clientes.Direccion</p>
			</div>
    </div>
    <div class="card-footer bg-light d-flex justify-content-end">
        <div class="btn-group">
            <a type="button" href="/indexcliente/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
        </div>
    </div>
</div>





@code {

    public Clientes clientes = new Clientes();

    [Parameter]
    public int ClienteID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClienteID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>("api/Clientes/" + ClienteID);
        if (clienteEncontrado != null)
        {
            this.clientes = clienteEncontrado;
        }
       
    }


}
