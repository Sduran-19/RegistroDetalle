@page "/createCliente";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header">
        <h3><strong> Registro de Cliente</strong></h3>
    </div>

        <div class="card-body">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="Nombres" class="form-label">Nombres:</label>
                    <InputText @bind-Value="clientes.Nombres" class="form-control" placeholder="Ingrese sus nombres" />
                    <ValidationMessage For="@(() => clientes.Nombres)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label  for="RNC" class="form-label">RNC:</label>
                    <InputText @bind-Value="clientes.RNC" class="form-control" placeholder="Ingrese el RNC" />
                    <ValidationMessage For="@(() => clientes.RNC)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label  for="Telefono" class="form-label">Tel&eacute;fono:</label>
                    <InputText @bind-Value="clientes.Telefono" class="form-control" placeholder="Ingrese el Tel&eacute;fono" />
                    <ValidationMessage For="@(() => clientes.Telefono)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label  for="Celular" class="form-label">Celular:</label>
                    <InputText @bind-Value="clientes.Celular" class="form-control" placeholder="Ingrese el Celular" />
                    <ValidationMessage For="@(() => clientes.Celular)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label   for="Email" class="form-label">Email:</label>
                    <InputText @bind-Value="clientes.Email" class="form-control" placeholder="Ingrese el Email" />
                    <ValidationMessage For="@(() => clientes.Email)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label  for="Direccion" class="form-label">Direcci&oacute;n:</label>
                    <InputText @bind-Value="clientes.Direccion" class="form-control" placeholder="Ingrese la Direcci&oacute;n" />
                    <ValidationMessage For="@(() => clientes.Direccion)" />
                </div>
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/indexcliente/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>
</EditForm>







@code {

    public Clientes clientes = new Clientes();

    public async Task Guardar()
    {
        var guardado = await httpClient.PostAsJsonAsync("api/Clientes", this.clientes);
        if (guardado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Guardado Existoso.", "Valido", "guardadoExito.mp3");
            NavigationManager.NavigateTo("/indexcliente");
        }
        else
        {
            await MostrarMensaje("No se puso contectar a la API!", "Invalido", "errorinesperado.mp3");
        }
    }


    string mensajeTexto = "", mensajeColor = ""; bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, string tipo, string audio)
    {
        mensajeTexto = mensaje;
        await JSRuntime.InvokeVoidAsync("playAudio", "recursos/audios/" + audio);

        if (tipo == "Valido")
        {
            mensajeColor = "success";
        }
        else
        {
            mensajeColor = "danger";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}
