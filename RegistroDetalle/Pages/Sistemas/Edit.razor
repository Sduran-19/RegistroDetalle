@page "/editarsistema/{SistemaID:int}";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<EditForm Model="sistemas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
   <div class="card shadow-lg">
            @*Header*@
            <div class="card-header">
                <h3><strong>Editar Sistema</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4"></div>
                @*Id*@
                <div class="mb-3">
                    <div class="col-4">
                        <label class="form-label" for="sistemaid"><strong>SistemaId:</strong></label>
                        <div class="input-group">
                            <InputNumber id="sistemaid" class="form-control" @bind-Value="sistemas.SistemaId"></InputNumber>
                        </div>
                    </div>
                </div>
                @*Nombre*@
                <div class="mb-3">
                    <div class="col-4">
                        <label class="form-label" for="nombre"><strong>Nombre:</strong></label>
                        <InputText id="nombre" class="form-control" @bind-Value="sistemas.Nombre" placeholder="Escriba un nombre para el sistema"></InputText>
                        <ValidationMessage For="@(() => sistemas.Nombre)"></ValidationMessage>
                    </div>
                </div>
            </div>
    </div>
        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/indexsistemas/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>

        @mensajeTexto
</EditForm>






@code {

    public Sistemas sistemas = new Sistemas();

    [Parameter]
    public int SistemaID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SistemaID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var sistemaEncontrado = await httpClient.GetFromJsonAsync<Sistemas>("api/Sistemas/" + SistemaID);
        if (sistemaEncontrado != null)
        {
            this.sistemas = sistemaEncontrado;
        }
        else
        {
            await MostrarMensaje("Sistema no encontrado", false);
        }
    }

    public async Task Guardar()
    {
        var guardado = await httpClient.PutAsJsonAsync("api/Sistemas", this.sistemas);
        if (guardado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Guardado Existoso.", true);
            NavigationManager.NavigateTo("/indexsistemas");
        }
        else
        {
            await MostrarMensaje("No se pudo conectar a la API!", false);
        }
    }

    string mensajeTexto = "";
    bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, bool exito)
    {
        mensajeTexto = mensaje;

        if (exito)
        {
            mensajeTexto = "Editado con Exito";
        }
        else
        {
            mensajeTexto = "Error";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}

