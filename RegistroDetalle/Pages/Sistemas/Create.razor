@page "/createsistemas";

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<EditForm Model="sistemas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card-header">
        <h3><strong> Registro de Sistemas</strong></h3>
    </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-0 mb-3">
                    <label style="font-weight: bold;" for="Nombre" class="form-label">Nombre:</label>
                    <InputText @bind-Value="sistemas.Nombre" class="form-control" placeholder="Ingrese nombre del sistema" />
                    <ValidationMessage For="@(() => sistemas.Nombre)" />
                </div>

            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-end">
            <div class="btn-group">
                <a type="button" href="/indexsistemas/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
                <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
            </div>
        </div>

    @mensajeTexto
</EditForm>





@code {

    public Sistemas sistemas = new Sistemas();

    public async Task Guardar()
    {
        var guardado = await httpClient.PostAsJsonAsync("api/Sistemas", this.sistemas);
        if (guardado.IsSuccessStatusCode)
        {
            await MostrarMensaje("Guardado Existoso.", true);
            NavigationManager.NavigateTo("/indexsistemas");
        }
        else
        {
            await MostrarMensaje("Error, No se guardo", false);
        }
    }

    string mensajeTexto = "";
    bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, bool exito)
    {
        mensajeTexto = mensaje;

        if (exito)
        {
            mensajeTexto = "Creado con Exito";
        }
        else
        {
            mensajeTexto = "Error";
        }

        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}

